{"version":3,"file":"js/453.2b869633.js","mappings":"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","sources":["webpack://data-processor-frontend/./src/views/DataVisualizationView.vue","webpack://data-processor-frontend/./src/utils/standardColumns.js","webpack://data-processor-frontend/./src/views/DataVisualizationView.vue?400b"],"sourcesContent":["<template>\n  <div class=\"visualization-view container py-4\">\n    <div class=\"mb-4\">\n      <button @click=\"$router.go(-1)\" class=\"btn btn-sm btn-outline-secondary\">\n        <i class=\"bi bi-arrow-left me-1\"></i> Back\n      </button>\n    </div>\n    \n    <h2 class=\"mb-4\">Data Visualization</h2>\n    \n    <div class=\"alert alert-info mb-4\">\n      <div class=\"d-flex align-items-center\">\n        <i class=\"bi bi-info-circle-fill me-2 fs-4\"></i>\n        <div>\n          <strong>Standardized Column Format</strong>\n          <p class=\"mb-1\">For best visualization results, your data should include these key columns:</p>\n          <div class=\"d-flex flex-wrap gap-2 mb-2\">\n            <span v-for=\"col in standardRequiredColumns\" :key=\"col.id\" class=\"badge bg-primary\">{{ col.name }}</span>\n          </div>\n          <button @click=\"downloadTemplate\" class=\"btn btn-sm btn-outline-primary\">\n            <i class=\"bi bi-download me-1\"></i> Download Template\n          </button>\n        </div>\n      </div>\n    </div>\n    \n    <div v-if=\"loading\" class=\"text-center my-5\">\n      <div class=\"spinner-border text-primary\" role=\"status\">\n        <span class=\"visually-hidden\">Loading...</span>\n      </div>\n      <p class=\"mt-2\">Loading your files...</p>\n    </div>\n    \n    <div v-else-if=\"error\" class=\"alert alert-danger\">\n      {{ error }}\n    </div>\n    \n    <div v-else-if=\"processedFiles.length === 0\" class=\"alert alert-info\">\n      <div class=\"text-center\">\n        <i class=\"bi bi-file-earmark-x fs-1 mb-2\"></i>\n        <p>No processed files available. Process a file to see visualizations.</p>\n      </div>\n    </div>\n    \n    <div v-else class=\"row\">\n      <div v-for=\"file in processedFiles\" :key=\"file.id\" class=\"col-md-6 col-lg-4 mb-4\">\n        <div class=\"card h-100 shadow-sm\">\n          <div class=\"card-header bg-success text-white d-flex justify-content-between align-items-center\">\n            <div class=\"text-truncate\" :title=\"file.title\">{{ file.title }}</div>\n            <span class=\"badge bg-light text-dark\">{{ formatDate(file.processed_at) }}</span>\n          </div>\n          \n          <div class=\"card-body\">\n            <div class=\"chart-preview\">\n              <canvas :ref=\"`chart-${file.id}`\"></canvas>\n            </div>\n            \n            <div class=\"mt-3 text-center\">\n              <router-link :to=\"`/files/${file.id}`\" class=\"btn btn-outline-success btn-sm\">\n                <i class=\"bi bi-graph-up me-1\"></i> View All Charts\n              </router-link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex';\nimport { STANDARD_COLUMNS } from '@/utils/standardColumns';\n\nexport default {\n  name: 'DataVisualizationView',\n  data() {\n    return {\n      chartInstances: {},\n      chartRenderTimeout: null,\n      standardRequiredColumns: STANDARD_COLUMNS.filter(col => col.required)\n    };\n  },\n  computed: {\n    ...mapState(['files', 'loading', 'error']),\n    processedFiles() {\n      return this.files.filter(file => file.processed);\n    }\n  },\n  mounted() {\n    this.fetchFiles();\n    // Give time for the DOM to load before attempting to render charts\n    this.chartRenderTimeout = setTimeout(() => {\n      this.renderCharts();\n    }, 500);\n  },\n  \n  updated() {\n    // Wait for the DOM to be fully updated\n    this.$nextTick(() => {\n      this.renderCharts();\n    });\n  },\n  beforeUnmount() {\n    // Important: Clean up all chart instances before component is destroyed\n    this.destroyAllCharts();\n    // Cancel any pending chart renders\n    if (this.chartRenderTimeout) {\n      clearTimeout(this.chartRenderTimeout);\n    }\n  },\n  methods: {\n    ...mapActions(['fetchFiles']),\n    \n    downloadTemplate() {\n      // Generate CSV content with headers from standard columns\n      const headers = STANDARD_COLUMNS.map(col => col.name).join(',');\n      const csvContent = 'data:text/csv;charset=utf-8,' + headers;\n      \n      // Create a download link and trigger it\n      const encodedUri = encodeURI(csvContent);\n      const link = document.createElement('a');\n      link.setAttribute('href', encodedUri);\n      link.setAttribute('download', 'aquagreen_data_template.csv');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      this.$toast?.success('Template downloaded successfully');\n    },\n    \n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleDateString();\n    },\n    \n    destroyAllCharts() {\n      // Safely destroy all chart instances\n      Object.values(this.chartInstances).forEach(chart => {\n        if (chart && typeof chart.destroy === 'function') {\n          chart.destroy();\n        }\n      });\n      this.chartInstances = {};\n    },\n    \n    renderCharts() {\n      // First destroy any existing charts\n      this.destroyAllCharts();\n      \n      // Import Chart.js dynamically to avoid SSR issues\n      import('chart.js/auto').then((Chart) => {\n        // Make sure the component is still mounted\n        if (!this.$refs) return;\n        \n        // Render charts for each file\n        this.processedFiles.forEach(file => {\n          const refName = `chart-${file.id}`;\n          // Using $refs safely\n          const elements = this.$refs[refName];\n          \n          // Check if the ref exists and is an array\n          if (!elements || !elements.length) return;\n          \n          // Get the canvas element\n          const canvas = elements[0];\n          if (!canvas) return;\n          \n          // Ensure canvas has dimensions\n          if (canvas.offsetWidth === 0 || canvas.offsetHeight === 0) return;\n          \n          // Fetch the processed data for this file\n          this.$store.dispatch('fetchProcessedData', file.id)\n            .then(data => {\n              // Check if data is valid for visualization\n              if (!data || !Array.isArray(data)) {\n                if (data && data.error) {\n                  // Show a placeholder instead of an error\n                  this.renderEmptyChart(Chart.default, canvas, `File cannot be previewed: ${data.error}`);\n                  this.$toast?.warning(`File \"${file.title}\": ${data.error}, please check file content again.`);\n                }\n                return;\n              }\n              \n              if (data.length <= 1) {\n                this.renderEmptyChart(Chart.default, canvas, \"Not enough rows\");\n                this.$toast?.warning(`File \"${file.title}\" doesn't have enough data for visualization, please check file content again.`);\n                return;\n              }\n              \n              const keys = data[0] ? Object.keys(data[0]) : [];\n              if (keys.length <= 1) {\n                this.renderEmptyChart(Chart.default, canvas, \"Not enough columns\");\n                this.$toast?.warning(`File \"${file.title}\" doesn't have enough columns for visualization, please check file content again.`);\n                return;\n              }\n              \n              // Create random data for preview or use actual data\n              const chartLabels = data.slice(0, 5).map(row => row[keys[0]]);\n              const chartData = data.slice(0, 5).map(row => {\n                const val = row[keys[1]];\n                return isNaN(val) ? Math.random() * 100 : parseFloat(val);\n              });\n              \n              try {\n                // Create the chart\n                this.chartInstances[file.id] = new Chart.default(canvas, {\n                  type: 'bar',\n                  data: {\n                    labels: chartLabels.length ? chartLabels : ['Cat 1', 'Cat 2', 'Cat 3', 'Cat 4', 'Cat 5'],\n                    datasets: [{\n                      label: keys[1] || 'Sample Data',\n                      data: chartData.length ? chartData : [Math.random() * 100, Math.random() * 100, Math.random() * 100, Math.random() * 100, Math.random() * 100],\n                      backgroundColor: '#198754'\n                    }]\n                  },\n                  options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                      legend: {\n                        display: false\n                      },\n                      title: {\n                        display: true,\n                        text: 'Preview'\n                      }\n                    }\n                  }\n                });\n              } catch (error) {\n                console.error('Error creating chart:', error);\n                this.renderEmptyChart(Chart.default, canvas, \"Error creating chart\");\n              }\n            })\n            .catch(error => {\n              console.error(`Error fetching data for file ${file.id}:`, error);\n              this.renderEmptyChart(Chart.default, canvas, \"Cannot load data\");\n              if (error.response?.data?.error) {\n                this.$toast?.error(`Error with file \"${file.title}\": ${error.response.data.error}, please check file content again.`);\n              }\n            });\n        });\n      }).catch(error => {\n        console.error('Failed to load Chart.js:', error);\n      });\n    },\n    \n    renderEmptyChart(Chart, canvas, message) {\n      try {\n        // Create a placeholder chart with a message\n        this.chartInstances[`empty-${Date.now()}`] = new Chart(canvas, {\n          type: 'bar',\n          data: {\n            labels: [''],\n            datasets: [{\n              data: [0],\n              backgroundColor: '#f8f9fa'\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              y: {\n                display: false,\n                beginAtZero: true\n              },\n              x: {\n                display: false\n              }\n            },\n            plugins: {\n              legend: {\n                display: false\n              },\n              tooltip: {\n                enabled: false\n              },\n              title: {\n                display: true,\n                text: message || 'No data available',\n                color: '#6c757d',\n                font: {\n                  size: 14\n                }\n              }\n            }\n          }\n        });\n      } catch (error) {\n        console.error('Error creating empty chart:', error);\n      }\n    },\n  }\n};\n</script>\n\n<style scoped>\n.chart-preview {\n  height: 150px;\n  width: 100%;\n  position: relative;\n}\n</style>\n","/**\n * Standard column definitions for data visualization in AquaGreen Monitoring\n * These columns will be used as the standard format for data visualization\n */\n\nexport const STANDARD_COLUMNS = [\n  { id: 'plot_id', name: 'Plot ID', type: 'string', required: true },\n  { id: 'crop', name: 'Crop', type: 'string', required: true },\n  { id: 'year', name: 'Year', type: 'number', required: true },\n  { id: 'plant', name: 'Plant', type: 'string', required: true },\n  { id: 'variety', name: 'Variety', type: 'string', required: true },\n  { id: 'area_hectares', name: 'Area (ha)', type: 'number', required: false },\n  { id: 'production_tons', name: 'Production (tons)', type: 'number', required: false },\n  { id: 'yield_tons_per_hectare', name: 'Yield (tons/ha)', type: 'number', required: false },\n  { id: 'annual_rainfall_mm', name: 'Annual Rainfall (mm)', type: 'number', required: false },\n  { id: 'avg_temperature_c', name: 'Avg. Temperature (°C)', type: 'number', required: false },\n  { id: 'fertilizer_type_kg_ha', name: 'Fertilizer Type/Rate (kg/ha)', type: 'string', required: false },\n  { id: 'pesticide_used_kg_ha', name: 'Pesticide Used (kg/ha)', type: 'number', required: false },\n  { id: 'irrigation_type', name: 'Irrigation Type', type: 'string', required: false },\n  { id: 'soil_ph', name: 'Soil pH', type: 'number', required: false },\n  { id: 'organic_matter', name: 'Organic Matter (%)', type: 'number', required: false },\n  { id: 'p_level_mg_kg', name: 'P Level (mg/kg)', type: 'number', required: false },\n  { id: 'k_level_mg_kg', name: 'K Level (mg/kg)', type: 'number', required: false },\n  { id: 'n_level_mg_kg', name: 'N Level (mg/kg)', type: 'number', required: false },\n  { id: 'planting_date', name: 'Planting Date', type: 'date', required: false },\n  { id: 'harvest_date', name: 'Harvest Date', type: 'date', required: false }\n];\n\n/**\n * Function to validate if a dataset has the required standard columns\n * @param {Object[]} data - The dataset to validate\n * @returns {Object} - Validation result with success flag and missing columns if any\n */\nexport function validateDataAgainstStandard(data) {\n  if (!data || !Array.isArray(data) || data.length === 0) {\n    return { \n      success: false, \n      message: 'No data provided or data is not in the correct format'\n    };\n  }\n\n  // Check first row for column headers\n  const firstRow = data[0];\n  const missingRequiredColumns = [];\n  \n  // Check for required columns\n  STANDARD_COLUMNS.forEach(column => {\n    if (column.required && !(column.id in firstRow)) {\n      missingRequiredColumns.push(column.name);\n    }\n  });\n\n  if (missingRequiredColumns.length > 0) {\n    return {\n      success: false,\n      message: `Missing required columns: ${missingRequiredColumns.join(', ')}`,\n      missingColumns: missingRequiredColumns\n    };\n  }\n\n  return { success: true };\n}\n\n/**\n * Transform data to fit standard column structure, filling in missing columns\n * @param {Object[]} data - Original data\n * @returns {Object[]} - Transformed data with standard columns\n */\nexport function transformToStandardFormat(data) {\n  if (!data || !Array.isArray(data) || data.length === 0) {\n    return [];\n  }\n  \n  return data.map(row => {\n    const standardRow = {};\n    \n    // Add all standard columns (with null for missing values)\n    STANDARD_COLUMNS.forEach(column => {\n      standardRow[column.id] = row[column.id] !== undefined ? row[column.id] : null;\n    });\n    \n    return standardRow;\n  });\n}\n\n/**\n * Generate a template CSV with standard columns\n * @returns {string} - CSV content with header row\n */\nexport function generateTemplateCSV() {\n  const headers = STANDARD_COLUMNS.map(col => col.name).join(',');\n  return headers;\n}\n","import { render } from \"./DataVisualizationView.vue?vue&type=template&id=cfca3ce8&scoped=true\"\nimport script from \"./DataVisualizationView.vue?vue&type=script&lang=js\"\nexport * from \"./DataVisualizationView.vue?vue&type=script&lang=js\"\n\nimport \"./DataVisualizationView.vue?vue&type=style&index=0&id=cfca3ce8&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-cfca3ce8\"]])\n\nexport default __exports__"],"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","onClick","_cache","$event","_ctx","$router","go","_createTextVNode","_hoisted_3","_hoisted_4","_hoisted_5","_Fragment","_renderList","$data","standardRequiredColumns","col","id","name","args","$options","downloadTemplate","loading","_hoisted_6","role","error","_hoisted_7","_toDisplayString","processedFiles","length","_hoisted_8","_hoisted_9","file","_hoisted_10","_hoisted_11","title","_hoisted_12","_hoisted_13","formatDate","processed_at","_hoisted_14","_hoisted_15","ref_for","ref","_hoisted_16","_createVNode","_component_router_link","to","default","_withCtx","_","STANDARD_COLUMNS","type","required","data","chartInstances","chartRenderTimeout","filter","computed","mapState","this","files","processed","mounted","fetchFiles","setTimeout","renderCharts","updated","$nextTick","beforeUnmount","destroyAllCharts","clearTimeout","methods","mapActions","headers","map","join","csvContent","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","removeChild","$toast","success","dateString","date","Date","toLocaleDateString","Object","values","forEach","chart","destroy","then","Chart","$refs","refName","elements","canvas","offsetWidth","offsetHeight","$store","dispatch","Array","isArray","renderEmptyChart","warning","keys","chartLabels","slice","row","chartData","val","isNaN","Math","random","parseFloat","labels","datasets","label","backgroundColor","options","responsive","maintainAspectRatio","plugins","legend","display","text","console","catch","response","message","now","scales","y","beginAtZero","x","tooltip","enabled","color","font","size","__exports__","render"],"sourceRoot":""}